
		函数指针和指针函数
1.
//arr = &arr[0] 数组首地址
//&arr 数组的地址
2
char* ps = "bacf";  最好写成const char* ps = "bacf"
常量区中的内容在整个程序的执行期间是不允许被修改的，且同一份常量字符串只会创建一份，不会重复创建存储。
char* ps = "bacf";
printf("%s\n",ps);
这种方式是将字符串的首地址放到指针中，通过指针可以找到该字符串（千万不要理解成将字符串放到指针里面去，这是不可能的）。（类似与数组名就是首元素地址，但是跟数组还是有所区别的，这个字符串是一个常量字符串，无法被改变
//1:
char arr[5];
char(*pa)[5] = &arr;
//2:
char* ch[8];
char* (*pc)[8] = &ch;
//3:
int(*p)[10];
//解释: p先和*结合，说明p是一个指针变量，然后指着指向的是一个大小为10个整型的数组。所以p是一个指针，指向一个数组，叫数组指针。
//这里要注意:[]的优先级要高于*号的，所以必须加上(）来保证p先和*结合。
	函数指针
注意：
& 函数名 和 函数名均表示函数的地址！
数组名 != &数组名
函数名 == &函数名

int (*pd)(int,int) = &Sdd;pd的类型是int (*)(int,int)
int sum = (*pd)(2,3) 和 int sum = pd(2,30)一样的
注意:
既然这个地方的 * 可以省略，那么我们在使用的时候 * 可以用多个，也可以不要， * 号在这里就是一个摆设，这个地方放 * 是为了方便理解+
学习指针。
	函数指针数组
那要把函数的地址存到一个数组中，那这个数组就叫函数指针数组
int (*parr1[10])();
int* parr2[10]();
int (*)() parr3[10];
