头文件: stdlib.h
malloc:
函数原型：void * malloc(size_t size);
size_t就是unsigned int（无符号整型）

这个函数的作用就是在动态存储区中分配一个长度为size个字节的连续空间，并返回指向该空间的指针。

1）如果开辟成功，则返回一个指向开辟好空间的指针。
2）如果开辟失败，则返回一个NULL指针，因此malloc的返回值一定要做检查。
3）返回值的类型是void * ，所以malloc函数并不知道开辟空间的类型，具体在使用的时候使用者自己来决定。
4）如果参数size为0，malloc的行为是标准是未定义的，取决于编译器。

动态开辟的空间如何释放和回收呢？
C语言提供了一个专门完成这个功能的库函数-- - free
free
函数原型：void free(void* p)

free的作用就是释放指针变量p所指向的动态空间，使这部分空间能够重新被利用。

1）如果参数ptr指向的空间不是动态开辟的，那free函数的行为是未定义的。
2）如果参数 ptr是NULL指针，则函数什么事都不做。

注意： 用malloc申请的空间，里面的内容是随机值，如果不初始化的话，可能就会得到一些意想不到的值；
理解：如果参数ptr指向的空间不是动态开辟的，那free函数的行为是未定义的。

calloc

函数原型：void * calloc(size_t num, size_t size);

1）函数的功能是为num 个大小为size的元素开辟一块空间，并且把空间的每个字节初始化为O
2）与函数ma1loc的区别只在于calloc会在返回地址之前把申请的空间的每个字节初始化为全0。