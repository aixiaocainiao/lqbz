////动态多态
//#include <iostream>
//using namespace std;
////动物类
//class Animal {
//public:
//	//虚函数  
//	//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。
//	virtual void Speak()
//	{
//		cout << "Animal在说话 " << endl;
//	}
//};
////猫类
//class Cat : public Animal {
//public:
//	//重写 函数返回值类型 函数名 参数列表完全相同 子类的virtual 可写可不写、
//	//virtual void Speak() 和下面的一样的
//	void Speak() {
//		cout << "Cat在说话 " << endl;
//	}
//};
////狗类
//class Dog : public Animal {
//public:
//	//重写 函数返回值类型 函数名 参数列表完全相同 子类的virtual 可写可不写、
//	//virtual void Speak() 和下面的一样的
//	void Speak() {
//		cout << "Dog在说话 " << endl;
//	}
//};
////执行说话的函数
////地址早绑定 在编译阶段确定函数地址
////如果想执行让猫说话 ，那么这个函数地址就不能提前绑定，需要在运行阶段进行绑定，地址晚绑定
//
////动态多态满足条件
////1.有继承关系
////2.子类重写父类的虚函数
//
////动态多态使用.
////父类的指针或者引用 指向子类对象
//void doSpeak(Animal& animal) //Animal& animal = cat
//{
//	animal.Speak();
//}
//void test() {
//	Cat cat;
//	doSpeak(cat);
//
//	Dog dog;
//	doSpeak(dog);
//
//}
//void test01() {
//	cout << "sizeof(Animal) " << sizeof(Animal) << endl;
//}
//int main()
//{
//	
//	//test();
//
//	test01();
//	system("pause");
//	return 0;
//}